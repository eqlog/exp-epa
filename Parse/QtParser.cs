//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Qt.g4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
[System.CLSCompliant(false)]
public partial class QtParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, ID=13, WS=14;
	public const int
		RULE_unit = 0, RULE_def = 1, RULE_ctxExt = 2, RULE_expr = 3, RULE_argExpr = 4, 
		RULE_letExpr = 5, RULE_idExpr = 6, RULE_elimExpr = 7, RULE_elimCase = 8;
	public static readonly string[] ruleNames = {
		"unit", "def", "ctxExt", "expr", "argExpr", "letExpr", "idExpr", "elimExpr", 
		"elimCase"
	};

	private static readonly string[] _LiteralNames = {
		null, "'def'", "':'", "':='", "'.'", "'('", "')'", "'let'", "'in'", "'elim'", 
		"'into'", "'|'", "'=>'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, "ID", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Qt.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static QtParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public QtParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public QtParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class UnitContext : ParserRuleContext {
		public DefContext _def;
		public IList<DefContext> _defs = new List<DefContext>();
		public DefContext[] def() {
			return GetRuleContexts<DefContext>();
		}
		public DefContext def(int i) {
			return GetRuleContext<DefContext>(i);
		}
		public UnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unit; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQtListener typedListener = listener as IQtListener;
			if (typedListener != null) typedListener.EnterUnit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQtListener typedListener = listener as IQtListener;
			if (typedListener != null) typedListener.ExitUnit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQtVisitor<TResult> typedVisitor = visitor as IQtVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnitContext unit() {
		UnitContext _localctx = new UnitContext(Context, State);
		EnterRule(_localctx, 0, RULE_unit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 21;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__0) {
				{
				{
				State = 18; _localctx._def = def();
				_localctx._defs.Add(_localctx._def);
				}
				}
				State = 23;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefContext : ParserRuleContext {
		public IToken name;
		public CtxExtContext _ctxExt;
		public IList<CtxExtContext> _exts = new List<CtxExtContext>();
		public ExprContext retTy;
		public ExprContext body;
		public ITerminalNode ID() { return GetToken(QtParser.ID, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public CtxExtContext[] ctxExt() {
			return GetRuleContexts<CtxExtContext>();
		}
		public CtxExtContext ctxExt(int i) {
			return GetRuleContext<CtxExtContext>(i);
		}
		public DefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_def; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQtListener typedListener = listener as IQtListener;
			if (typedListener != null) typedListener.EnterDef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQtListener typedListener = listener as IQtListener;
			if (typedListener != null) typedListener.ExitDef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQtVisitor<TResult> typedVisitor = visitor as IQtVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefContext def() {
		DefContext _localctx = new DefContext(Context, State);
		EnterRule(_localctx, 2, RULE_def);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 24; Match(T__0);
			State = 25; _localctx.name = Match(ID);
			State = 29;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__4) {
				{
				{
				State = 26; _localctx._ctxExt = ctxExt();
				_localctx._exts.Add(_localctx._ctxExt);
				}
				}
				State = 31;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 32; Match(T__1);
			State = 33; _localctx.retTy = expr();
			State = 34; Match(T__2);
			State = 35; _localctx.body = expr();
			State = 36; Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CtxExtContext : ParserRuleContext {
		public IToken _ID;
		public IList<IToken> _names = new List<IToken>();
		public ExprContext ty;
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode[] ID() { return GetTokens(QtParser.ID); }
		public ITerminalNode ID(int i) {
			return GetToken(QtParser.ID, i);
		}
		public CtxExtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ctxExt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQtListener typedListener = listener as IQtListener;
			if (typedListener != null) typedListener.EnterCtxExt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQtListener typedListener = listener as IQtListener;
			if (typedListener != null) typedListener.ExitCtxExt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQtVisitor<TResult> typedVisitor = visitor as IQtVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCtxExt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CtxExtContext ctxExt() {
		CtxExtContext _localctx = new CtxExtContext(Context, State);
		EnterRule(_localctx, 4, RULE_ctxExt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 38; Match(T__4);
			State = 40;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 39; _localctx._ID = Match(ID);
				_localctx._names.Add(_localctx._ID);
				}
				}
				State = 42;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==ID );
			State = 44; Match(T__1);
			State = 45; _localctx.ty = expr();
			State = 46; Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext parenthesized;
		public IToken fun;
		public ArgExprContext _argExpr;
		public IList<ArgExprContext> _args = new List<ArgExprContext>();
		public LetExprContext let;
		public ElimExprContext elim;
		public IdExprContext id;
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode ID() { return GetToken(QtParser.ID, 0); }
		public ArgExprContext[] argExpr() {
			return GetRuleContexts<ArgExprContext>();
		}
		public ArgExprContext argExpr(int i) {
			return GetRuleContext<ArgExprContext>(i);
		}
		public LetExprContext letExpr() {
			return GetRuleContext<LetExprContext>(0);
		}
		public ElimExprContext elimExpr() {
			return GetRuleContext<ElimExprContext>(0);
		}
		public IdExprContext idExpr() {
			return GetRuleContext<IdExprContext>(0);
		}
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQtListener typedListener = listener as IQtListener;
			if (typedListener != null) typedListener.EnterExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQtListener typedListener = listener as IQtListener;
			if (typedListener != null) typedListener.ExitExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQtVisitor<TResult> typedVisitor = visitor as IQtVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		ExprContext _localctx = new ExprContext(Context, State);
		EnterRule(_localctx, 6, RULE_expr);
		int _la;
		try {
			State = 61;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 48; Match(T__4);
				State = 49; _localctx.parenthesized = expr();
				State = 50; Match(T__5);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 52; _localctx.fun = Match(ID);
				State = 54;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 53; _localctx._argExpr = argExpr();
					_localctx._args.Add(_localctx._argExpr);
					}
					}
					State = 56;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==T__4 || _la==ID );
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 58; _localctx.let = letExpr();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 59; _localctx.elim = elimExpr();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 60; _localctx.id = idExpr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgExprContext : ParserRuleContext {
		public ExprContext parenthesized;
		public IdExprContext id;
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public IdExprContext idExpr() {
			return GetRuleContext<IdExprContext>(0);
		}
		public ArgExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQtListener typedListener = listener as IQtListener;
			if (typedListener != null) typedListener.EnterArgExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQtListener typedListener = listener as IQtListener;
			if (typedListener != null) typedListener.ExitArgExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQtVisitor<TResult> typedVisitor = visitor as IQtVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgExprContext argExpr() {
		ArgExprContext _localctx = new ArgExprContext(Context, State);
		EnterRule(_localctx, 8, RULE_argExpr);
		try {
			State = 68;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__4:
				EnterOuterAlt(_localctx, 1);
				{
				State = 63; Match(T__4);
				State = 64; _localctx.parenthesized = expr();
				State = 65; Match(T__5);
				}
				break;
			case ID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 67; _localctx.id = idExpr();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LetExprContext : ParserRuleContext {
		public IToken varName;
		public ExprContext ty;
		public ExprContext val;
		public ExprContext body;
		public ITerminalNode ID() { return GetToken(QtParser.ID, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public LetExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_letExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQtListener typedListener = listener as IQtListener;
			if (typedListener != null) typedListener.EnterLetExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQtListener typedListener = listener as IQtListener;
			if (typedListener != null) typedListener.ExitLetExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQtVisitor<TResult> typedVisitor = visitor as IQtVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLetExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LetExprContext letExpr() {
		LetExprContext _localctx = new LetExprContext(Context, State);
		EnterRule(_localctx, 10, RULE_letExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 70; Match(T__6);
			State = 71; _localctx.varName = Match(ID);
			State = 72; Match(T__1);
			State = 73; _localctx.ty = expr();
			State = 74; Match(T__2);
			State = 75; _localctx.val = expr();
			State = 76; Match(T__7);
			State = 77; _localctx.body = expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdExprContext : ParserRuleContext {
		public IToken id;
		public ITerminalNode ID() { return GetToken(QtParser.ID, 0); }
		public IdExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_idExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQtListener typedListener = listener as IQtListener;
			if (typedListener != null) typedListener.EnterIdExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQtListener typedListener = listener as IQtListener;
			if (typedListener != null) typedListener.ExitIdExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQtVisitor<TResult> typedVisitor = visitor as IQtVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdExprContext idExpr() {
		IdExprContext _localctx = new IdExprContext(Context, State);
		EnterRule(_localctx, 12, RULE_idExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 79; _localctx.id = Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElimExprContext : ParserRuleContext {
		public ExprContext discriminee;
		public CtxExtContext _ctxExt;
		public IList<CtxExtContext> _exts = new List<CtxExtContext>();
		public ExprContext intoTy;
		public ElimCaseContext _elimCase;
		public IList<ElimCaseContext> _cases = new List<ElimCaseContext>();
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public CtxExtContext[] ctxExt() {
			return GetRuleContexts<CtxExtContext>();
		}
		public CtxExtContext ctxExt(int i) {
			return GetRuleContext<CtxExtContext>(i);
		}
		public ElimCaseContext[] elimCase() {
			return GetRuleContexts<ElimCaseContext>();
		}
		public ElimCaseContext elimCase(int i) {
			return GetRuleContext<ElimCaseContext>(i);
		}
		public ElimExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elimExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQtListener typedListener = listener as IQtListener;
			if (typedListener != null) typedListener.EnterElimExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQtListener typedListener = listener as IQtListener;
			if (typedListener != null) typedListener.ExitElimExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQtVisitor<TResult> typedVisitor = visitor as IQtVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElimExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElimExprContext elimExpr() {
		ElimExprContext _localctx = new ElimExprContext(Context, State);
		EnterRule(_localctx, 14, RULE_elimExpr);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 81; Match(T__8);
			State = 82; _localctx.discriminee = expr();
			State = 83; Match(T__9);
			State = 87;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__4) {
				{
				{
				State = 84; _localctx._ctxExt = ctxExt();
				_localctx._exts.Add(_localctx._ctxExt);
				}
				}
				State = 89;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 90; Match(T__1);
			State = 91; _localctx.intoTy = expr();
			State = 95;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 92; _localctx._elimCase = elimCase();
					_localctx._cases.Add(_localctx._elimCase);
					}
					} 
				}
				State = 97;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElimCaseContext : ParserRuleContext {
		public CtxExtContext _ctxExt;
		public IList<CtxExtContext> _exts = new List<CtxExtContext>();
		public ExprContext caseTy;
		public ExprContext body;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public CtxExtContext[] ctxExt() {
			return GetRuleContexts<CtxExtContext>();
		}
		public CtxExtContext ctxExt(int i) {
			return GetRuleContext<CtxExtContext>(i);
		}
		public ElimCaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elimCase; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQtListener typedListener = listener as IQtListener;
			if (typedListener != null) typedListener.EnterElimCase(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQtListener typedListener = listener as IQtListener;
			if (typedListener != null) typedListener.ExitElimCase(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQtVisitor<TResult> typedVisitor = visitor as IQtVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElimCase(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElimCaseContext elimCase() {
		ElimCaseContext _localctx = new ElimCaseContext(Context, State);
		EnterRule(_localctx, 16, RULE_elimCase);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 98; Match(T__10);
			State = 102;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__4) {
				{
				{
				State = 99; _localctx._ctxExt = ctxExt();
				_localctx._exts.Add(_localctx._ctxExt);
				}
				}
				State = 104;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 105; Match(T__1);
			State = 106; _localctx.caseTy = expr();
			State = 107; Match(T__11);
			State = 108; _localctx.body = expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x10', 'q', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x3', '\x2', '\a', 
		'\x2', '\x16', '\n', '\x2', '\f', '\x2', '\xE', '\x2', '\x19', '\v', '\x2', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\a', '\x3', '\x1E', '\n', '\x3', 
		'\f', '\x3', '\xE', '\x3', '!', '\v', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', 
		'\x3', '\x4', '\x6', '\x4', '+', '\n', '\x4', '\r', '\x4', '\xE', '\x4', 
		',', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x6', '\x5', '\x39', '\n', '\x5', '\r', '\x5', '\xE', '\x5', ':', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', '@', '\n', '\x5', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', 
		'\x6', 'G', '\n', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\a', '\t', 'X', '\n', '\t', '\f', '\t', '\xE', '\t', '[', '\v', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\a', '\t', '`', '\n', '\t', 
		'\f', '\t', '\xE', '\t', '\x63', '\v', '\t', '\x3', '\n', '\x3', '\n', 
		'\a', '\n', 'g', '\n', '\n', '\f', '\n', '\xE', '\n', 'j', '\v', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x2', '\x2', '\v', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', 
		'\x10', '\x12', '\x2', '\x2', '\x2', 's', '\x2', '\x17', '\x3', '\x2', 
		'\x2', '\x2', '\x4', '\x1A', '\x3', '\x2', '\x2', '\x2', '\x6', '(', '\x3', 
		'\x2', '\x2', '\x2', '\b', '?', '\x3', '\x2', '\x2', '\x2', '\n', '\x46', 
		'\x3', '\x2', '\x2', '\x2', '\f', 'H', '\x3', '\x2', '\x2', '\x2', '\xE', 
		'Q', '\x3', '\x2', '\x2', '\x2', '\x10', 'S', '\x3', '\x2', '\x2', '\x2', 
		'\x12', '\x64', '\x3', '\x2', '\x2', '\x2', '\x14', '\x16', '\x5', '\x4', 
		'\x3', '\x2', '\x15', '\x14', '\x3', '\x2', '\x2', '\x2', '\x16', '\x19', 
		'\x3', '\x2', '\x2', '\x2', '\x17', '\x15', '\x3', '\x2', '\x2', '\x2', 
		'\x17', '\x18', '\x3', '\x2', '\x2', '\x2', '\x18', '\x3', '\x3', '\x2', 
		'\x2', '\x2', '\x19', '\x17', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x1B', 
		'\a', '\x3', '\x2', '\x2', '\x1B', '\x1F', '\a', '\xF', '\x2', '\x2', 
		'\x1C', '\x1E', '\x5', '\x6', '\x4', '\x2', '\x1D', '\x1C', '\x3', '\x2', 
		'\x2', '\x2', '\x1E', '!', '\x3', '\x2', '\x2', '\x2', '\x1F', '\x1D', 
		'\x3', '\x2', '\x2', '\x2', '\x1F', ' ', '\x3', '\x2', '\x2', '\x2', ' ', 
		'\"', '\x3', '\x2', '\x2', '\x2', '!', '\x1F', '\x3', '\x2', '\x2', '\x2', 
		'\"', '#', '\a', '\x4', '\x2', '\x2', '#', '$', '\x5', '\b', '\x5', '\x2', 
		'$', '%', '\a', '\x5', '\x2', '\x2', '%', '&', '\x5', '\b', '\x5', '\x2', 
		'&', '\'', '\a', '\x6', '\x2', '\x2', '\'', '\x5', '\x3', '\x2', '\x2', 
		'\x2', '(', '*', '\a', '\a', '\x2', '\x2', ')', '+', '\a', '\xF', '\x2', 
		'\x2', '*', ')', '\x3', '\x2', '\x2', '\x2', '+', ',', '\x3', '\x2', '\x2', 
		'\x2', ',', '*', '\x3', '\x2', '\x2', '\x2', ',', '-', '\x3', '\x2', '\x2', 
		'\x2', '-', '.', '\x3', '\x2', '\x2', '\x2', '.', '/', '\a', '\x4', '\x2', 
		'\x2', '/', '\x30', '\x5', '\b', '\x5', '\x2', '\x30', '\x31', '\a', '\b', 
		'\x2', '\x2', '\x31', '\a', '\x3', '\x2', '\x2', '\x2', '\x32', '\x33', 
		'\a', '\a', '\x2', '\x2', '\x33', '\x34', '\x5', '\b', '\x5', '\x2', '\x34', 
		'\x35', '\a', '\b', '\x2', '\x2', '\x35', '@', '\x3', '\x2', '\x2', '\x2', 
		'\x36', '\x38', '\a', '\xF', '\x2', '\x2', '\x37', '\x39', '\x5', '\n', 
		'\x6', '\x2', '\x38', '\x37', '\x3', '\x2', '\x2', '\x2', '\x39', ':', 
		'\x3', '\x2', '\x2', '\x2', ':', '\x38', '\x3', '\x2', '\x2', '\x2', ':', 
		';', '\x3', '\x2', '\x2', '\x2', ';', '@', '\x3', '\x2', '\x2', '\x2', 
		'<', '@', '\x5', '\f', '\a', '\x2', '=', '@', '\x5', '\x10', '\t', '\x2', 
		'>', '@', '\x5', '\xE', '\b', '\x2', '?', '\x32', '\x3', '\x2', '\x2', 
		'\x2', '?', '\x36', '\x3', '\x2', '\x2', '\x2', '?', '<', '\x3', '\x2', 
		'\x2', '\x2', '?', '=', '\x3', '\x2', '\x2', '\x2', '?', '>', '\x3', '\x2', 
		'\x2', '\x2', '@', '\t', '\x3', '\x2', '\x2', '\x2', '\x41', '\x42', '\a', 
		'\a', '\x2', '\x2', '\x42', '\x43', '\x5', '\b', '\x5', '\x2', '\x43', 
		'\x44', '\a', '\b', '\x2', '\x2', '\x44', 'G', '\x3', '\x2', '\x2', '\x2', 
		'\x45', 'G', '\x5', '\xE', '\b', '\x2', '\x46', '\x41', '\x3', '\x2', 
		'\x2', '\x2', '\x46', '\x45', '\x3', '\x2', '\x2', '\x2', 'G', '\v', '\x3', 
		'\x2', '\x2', '\x2', 'H', 'I', '\a', '\t', '\x2', '\x2', 'I', 'J', '\a', 
		'\xF', '\x2', '\x2', 'J', 'K', '\a', '\x4', '\x2', '\x2', 'K', 'L', '\x5', 
		'\b', '\x5', '\x2', 'L', 'M', '\a', '\x5', '\x2', '\x2', 'M', 'N', '\x5', 
		'\b', '\x5', '\x2', 'N', 'O', '\a', '\n', '\x2', '\x2', 'O', 'P', '\x5', 
		'\b', '\x5', '\x2', 'P', '\r', '\x3', '\x2', '\x2', '\x2', 'Q', 'R', '\a', 
		'\xF', '\x2', '\x2', 'R', '\xF', '\x3', '\x2', '\x2', '\x2', 'S', 'T', 
		'\a', '\v', '\x2', '\x2', 'T', 'U', '\x5', '\b', '\x5', '\x2', 'U', 'Y', 
		'\a', '\f', '\x2', '\x2', 'V', 'X', '\x5', '\x6', '\x4', '\x2', 'W', 'V', 
		'\x3', '\x2', '\x2', '\x2', 'X', '[', '\x3', '\x2', '\x2', '\x2', 'Y', 
		'W', '\x3', '\x2', '\x2', '\x2', 'Y', 'Z', '\x3', '\x2', '\x2', '\x2', 
		'Z', '\\', '\x3', '\x2', '\x2', '\x2', '[', 'Y', '\x3', '\x2', '\x2', 
		'\x2', '\\', ']', '\a', '\x4', '\x2', '\x2', ']', '\x61', '\x5', '\b', 
		'\x5', '\x2', '^', '`', '\x5', '\x12', '\n', '\x2', '_', '^', '\x3', '\x2', 
		'\x2', '\x2', '`', '\x63', '\x3', '\x2', '\x2', '\x2', '\x61', '_', '\x3', 
		'\x2', '\x2', '\x2', '\x61', '\x62', '\x3', '\x2', '\x2', '\x2', '\x62', 
		'\x11', '\x3', '\x2', '\x2', '\x2', '\x63', '\x61', '\x3', '\x2', '\x2', 
		'\x2', '\x64', 'h', '\a', '\r', '\x2', '\x2', '\x65', 'g', '\x5', '\x6', 
		'\x4', '\x2', '\x66', '\x65', '\x3', '\x2', '\x2', '\x2', 'g', 'j', '\x3', 
		'\x2', '\x2', '\x2', 'h', '\x66', '\x3', '\x2', '\x2', '\x2', 'h', 'i', 
		'\x3', '\x2', '\x2', '\x2', 'i', 'k', '\x3', '\x2', '\x2', '\x2', 'j', 
		'h', '\x3', '\x2', '\x2', '\x2', 'k', 'l', '\a', '\x4', '\x2', '\x2', 
		'l', 'm', '\x5', '\b', '\x5', '\x2', 'm', 'n', '\a', '\xE', '\x2', '\x2', 
		'n', 'o', '\x5', '\b', '\x5', '\x2', 'o', '\x13', '\x3', '\x2', '\x2', 
		'\x2', '\v', '\x17', '\x1F', ',', ':', '?', '\x46', 'Y', '\x61', 'h',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
