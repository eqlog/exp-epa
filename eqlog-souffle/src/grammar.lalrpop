use crate::ast::*;
use std::iter::once;

grammar;

pub Theory: Vec<Declaration> = { Declaration* => <>, }

Id: String = { r"[A-Za-z][A-Za-z0-9'_]*" => <>.to_string(), }

pub PredicateArity: (String, Vec<String>) = {
    <name: Id> ":" <head: Id> <tail: ("*" <Id>)*>
        => (name, once(head).chain(tail).collect()),
}

pub FunctionArity: (String, Vec<String>, String) = {
    <name: Id> ":" <head_dom: (<Id>)?> <tail_dom: ("*" <Id>)*> "->" <cod: Id>
        => (name, head_dom.into_iter().chain(tail_dom).collect(), cod),
}

pub Term: Term = {
    <var: Id> => Term::Variable(var),
    "_" => Term::Wildcard(None),
    <function: Id> "(" <head_arg: (<Term>)?> <tail_args: ("," <Term>)*> ")" => {
        let args: Vec<Term> = head_arg.into_iter().chain(tail_args).collect();
        Term::Application(function, args)
    },
    <t: Term> ":" <sort: Id> => Term::Sorted(Box::new(t), sort),
}

Atom: Atom = {
    <lhs: Term> "=" <rhs: Term> => Atom::Equal(lhs, rhs),
    "!" <t: Term> => Atom::Defined(t, None),
    "!" "(" <t: Term> ":" <s: Id> ")" => Atom::Defined(t, Some(s)),
    <pred: Id> "(" <head_arg: (<Term>)?> <tail_args: ("," <Term>)*> ")"
        => Atom::Predicate(pred, head_arg.into_iter().chain(tail_args).collect()),
}

Formula: Formula = {
    <head_atom: (<Atom>)?> <tail_atoms : ("&" <Atom>)*> =>
        Formula(head_atom.into_iter().chain(tail_atoms).collect()),
}

pub Sequent: Sequent = {
    <premise: Formula> "=>" <conclusion: Formula> => Sequent::Implication(premise, conclusion),
    <premise: Formula> "=!>" <conclusion: Formula> => Sequent::NonSurjectiveImplication(premise, conclusion),
    <s: Term> "~>" <t: Term> => Sequent::Reduction(s, t),
    <premise: Formula> "=>" <s: Term> "~>" <t: Term> => Sequent::ConditionalReduction(premise, s, t),
}

Declaration: Declaration = {
    "Sort" <sort: Id> ";" => Declaration::Sort(sort),
    "Pred" <pred: PredicateArity> ";" => {
        let (name, arity) = pred;
        Declaration::Predicate { name, arity }
    },
    "Func" <func: FunctionArity> ";" => {
        let (name, dom, cod) = func;
        Declaration::Function { name, dom, cod }
    },
    "Axiom" <seq: Sequent> ";" => Declaration::Axiom(seq),
}
