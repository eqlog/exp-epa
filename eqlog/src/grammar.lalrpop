use crate::direct_ast::*;
use crate::indirect_ast;
use crate::signature::Signature;
use std::iter::once;
use crate::analysis::check_semantically;
use crate::unification::TermMap;
use convert_case::{Case, Casing};

grammar;

Id: String = { r"[A-Za-z][A-Za-z0-9'_]*" => <>.to_string(), }

SnakeCaseId: String = {
    <id: Id> => { 
        assert_eq!(id.to_case(Case::Snake), id, "Expected identifier in snake_case");
        id
    },
}

CamelCaseId: String = {
    <id: Id> => { 
        assert_eq!(id.to_case(Case::UpperCamel), id, "Expected identifier in CamelCase");
        id
    },
}

SortDecl: Sort = { "Sort" <name: CamelCaseId> ";" => Sort(name) }

PredicateDecl: Predicate = {
    "Pred" <name: CamelCaseId> ":" <head: Id> <tail: ("*" <Id>)*> ";" => {
        Predicate{name, arity: once(head).chain(tail).collect()}
    },
}

FunctionDecl: Function = {
    "Func" <name: CamelCaseId> ":" <head_dom: (<Id>)?> <tail_dom: ("*" <Id>)*> "->" <cod: Id> ";" => {
        Function {
            name,
            dom: head_dom.into_iter().chain(tail_dom).collect(),
            cod,
        }
    },
}

Application: (String, Vec<Term>) = {
    <operator: Id> "(" <head_arg: (<Term>)?> <tail_args: ("," <Term>)*> ")" => {
        let args: Vec<Term> = head_arg.into_iter().chain(tail_args).collect();
        (operator, args)
    }
}

Term: Term = {
    <var: SnakeCaseId> => Term::Variable(var),
    "_" => Term::Wildcard,
    <app: Application> => Term::Application(app.0, app.1),
}

Atom: Atom = {
    <lhs: Term> "=" <rhs: Term> => Atom::Equal(lhs, rhs),
    <t: Term> "!" => Atom::Defined(t, None),
    <t: Term> "!" ":" <s: Id> => Atom::Defined(t, Some(s)),
    <app: Application> => Atom::Predicate(app.0, app.1),
}

Formula: Formula = {
    <head_atom: (<Atom>)?> <tail_atoms : ("&" <Atom>)*> =>
        Formula(head_atom.into_iter().chain(tail_atoms).collect()),
}

pub Sequent: Sequent = {
    <premise: Formula> "=>" <conclusion: Formula> => Sequent::Implication(premise, conclusion),
    <app: Application> "~>" <to: Term> => Sequent::Reduction {
        premise: Formula(Vec::new()),
        from_function: app.0,
        from_args: app.1,
        to,
    },
    <premise: Formula> "=>" <app: Application> "~>" <to: Term> => Sequent::Reduction {
        premise,
        from_function: app.0,
        from_args: app.1,
        to,
    },
}

AxiomDecl: Sequent = {
    "Axiom" <seq: Sequent> ";" => seq,
}

pub Theory: (Signature, Vec<(indirect_ast::Sequent, TermMap<String>)>) = {
    () => (Signature::new(), vec![]),
    <mut theory: Theory> <sort: SortDecl> => {
        theory.0.add_sort(sort);
        theory
    },
    <mut theory: Theory> <pred: PredicateDecl> => {
        theory.0.add_predicate(pred);
        theory
    },
    <mut theory: Theory> <func: FunctionDecl> => {
        theory.0.add_function(func);
        theory
    },
    <mut theory: Theory> <seq: AxiomDecl> => {
        let (ref sig, ref mut axioms) = &mut theory;
        let indirect_seq = indirect_ast::Sequent::new(&seq);
        let sorts = check_semantically(&sig, &indirect_seq);
        axioms.push((indirect_seq, sorts));
        theory
    },
}
